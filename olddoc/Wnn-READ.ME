/*
 * $Id: READ.ME,v 1.10.2.1 1999/02/08 02:15:22 yamasita Exp $
 */

/*
 * FreeWnn is a network-extensible Kana-to-Kanji conversion system.
 * This file is part of FreeWnn.
 * 
 * Copyright Kyoto University Research Institute for Mathematical Sciences
 *                 1987, 1988, 1989, 1990, 1991, 1992
 * Copyright OMRON Corporation. 1987, 1988, 1989, 1990, 1991, 1992, 1999
 * Copyright ASTEC, Inc. 1987, 1988, 1989, 1990, 1991, 1992
 *
 * Author: OMRON SOFTWARE Co., Ltd. <freewnn@rd.kyoto.omronsoft.co.jp>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Emacs; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Commentary:
 *
 * Change log:
 *
 * Last modified date: 8,Feb.1999
 *
 */

	Wnn Version 4.2

This distribution contains Version 4.1 of Wnn Japanese Input
System.  Wnn is a network-extensible Kana-to-Kanji conversion system
and was jointly developed and released by the Software Research Group
of Kyoto University Research Institute for Mathematical Science, OMRON
Corporation and Astec, Inc.  

This distribution has been tested on the following systems.
    SUN, SunOS 4.0.3, SunOS 4.1.1, SunOS 5.3
    OMRON LUNA, UniOS-B(4.3BSD), UniOS-U(SystemV R2.1), UniOS-Mach(MACH)
                DG/UX 5.4.2

**Installation

The source file contains literal strings and comments in "EUC" code.
Be sure to have a compiler allowing 8-bit input data path.

*Compilation by "Imake"

    Please read the [Before compile] section before compile.

    (In case of X11R6 source tree)
      Put Xsi as contrib/programs/Xsi.
	% cd ..
	% make World -f Makefile.ini

    (In case of installed X11R6)
      Put Xsi at any directory
	% cd ..
	% make World -f Makefile.inst

    (In case of X11R5)
	% cd ..
	% make World -f Makefile.R5ini

*Installation by "Imake"
 
	% make install


[Before compile]

The Project.tmpl (in $(TOP)/contrib/program/Xsi/config) defines variables
about install environments. (In case of X11R5, the Project.tmpl in
$(TOP)/contrib/im/Xsi/configR5). The descriptions follow:
 
- environments for compile

IMTOP = $(CONTRIBSRC)/programs/Xsi
   Directory on Wnn from the top on X11R6(X11R5).

- Parts installed
       variables                  part
----------------------------------------------------------
#define BuildWnn	       Japanese-Wnn
#define BuildCWnn	       Chinese-Wnn
#define BuildKWnn	       Korean-Wnn
#define BuildXwnmo	       Xwnmo
#define BuildJserver	       Japanese conversion server(jserver)
#define BuildJlib	       WnnLib
#define BuildWnnClients	       Client commands for Japanese
#define BuildWnnDicUtil	       Command for Japanese dictionaries
#define BuildPubdic	       Japanese dictionaries(Pubdic)
#define BuildWnnConsDic	       Japanese dictionaries
#define BuildWnnMan	       Online manuals
#define BuildJlibV3	       Compatible library for WnnV3
#define BuildCserver	       Chinese(Simplified) conversion server(cserver)
#define BuildTserver	       Chinese(Traditional) conversion server(cserver)
#define BuildCWnnClients       Client commands for Chinese
#define BuildCWnnDicUtil       Command for Chinese dictionaries
#define BuildCDic	       Chinese(Simplified) dictionaries
#define BuildTDic	       Chinese(Traditional) dictionaries
#define BuildKserver	       Korean conversion server(kserver)
#define BuildKWnnClients       Client commands for Korean
#define BuildKWnnDicUtil       Command for Korean dictionaries
#define BuildKDic	       Korean dictionaries

- install directories
WNNWNNDIR = /usr/local/lib/wnn dictionaries and configuration files
WNNBINDIR = /usr/local/bin     commands
WNNINCDIR = $(INCROOT)         header files
WNNLIBDIR = $(USRLIBDIR)       library

If you want to install Wnn in other specify directory, please edit
only the Project.tmpl file.

The Project.tmpl (in $(TOP)/contrib/im/Xsi/config) defines variable
WNNOWNER that defines user-id of all-programs (instead of uum).
(In case of X11R5, the Project.tmpl in $(TOP)/contrib/in/Xsi/configR5).
We recommend that you create a new user-id for all-programs,
instead of staying at root.  A default user-id is wnn.

"uum"'s owner is root with an s-bit.

If dictionaries have already exist in the install environment and
new dictionaries are installed, old frequences releaing old dictionaries
are not able to be used for new dictionaries. Thus, If dictionaries
already exist, new dictionaries are not installed.
If you want to install new dictionaries forcibly, please add the following
line in the Project.tmpl or another configuration files.

	#define WnnInstallDicForcibly	YES
	  ( # must be the top of line )

If your OS supports two-digit function keys, please add the following
line in the Wnn/include/commonhd.h.

	#define SUPPORT_TWODIGIT_FUNCTIONS
	  ( # must be the top of line )


*uum

The configuration of uum is in .uumrc and key bindings are in .uumkey.
(.uumrc and .uumkey used to be .wnnrc and .wnnkey in Wnn up to Ver.3.3.)
.uumrc defines the location where dictionary configuration files are
located. (Refer to Manual.)

**Directories
This distribution contains the following directories.

conv		to configure function keys.

etc		source files to be shared by several directories.

include	 	header files.

jd		configuration files for uum, jserver, and
		Romaji(alphabet)-to-Kana conversion table.  
		These files will be installed in JWNNWNNDIR
		(/usr/local/lib/wnn/ja_JP by default).

		jserverrc 	to define initialization of jserver
		uumrc		to initialize uum 
		uumkey		to define key binding of uum 
		wnnenvrc	to define dictionaries

		You may find many configuration files available
		in addition to default files.

jlib		libraries for application programmers.

jlib.V3		compatible library from Wnn Ver.3

jserver		Kana-to-Kanji conversion server.

jutil		dictionary utilities.

		atod	    to create new dictionary (from EUC to binary)
		dtoa	    from binaries to EUC
		oldatonewa  to convert EUC of Ver.3 to that of Ver.4
		wnnstat	    to report jserver status (e.g., users,
			    environment, files, dictionaries)
		wnnkill	    to terminate jserver
		wnntouch    to check and recover consistency of dictionary
			    files
		wddel	    to delete several words from a dictionary
		wdreg	    to add new words to a dictionary

manual		manuals in Japanese.

manual.en	manuals in English (subset).

pubdic 		dictionaries of PUBDIC.

romkan		Romaji(alphabet)-to-Kana conversion.

uum		front end processor for Japanese character input.

wnncons		products by Wnn Consortium.
